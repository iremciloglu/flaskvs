Index: templates/graph_option.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/graph_option.html b/templates/graph_option.html
new file mode 100644
--- /dev/null	
+++ b/templates/graph_option.html	
@@ -0,0 +1,67 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Graph Option Page</title>
+    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
+</head>
+<body>
+    <section>
+      <header>
+        {% block header %}
+        {% endblock %}
+      </header>
+
+      {% block content %}
+      {% endblock %}
+       <canvas id="SimChart" width="400" height="400"></canvas>
+    </section>
+  <script>
+    var ctx = document.getElementById("SimChart").getContext("2d");
+    var lineChartWeekly = new Chart(ctx, {
+      type: "line",
+      data: {
+        labels: {{ output }},
+        datasets: [
+          {
+            label: "Customers",
+            data: {{ output2 }},
+            fill: false,
+            borderColor: "rgb(75, 192, 192)",
+            lineTension: 0.1,
+            pointRadius: 4,
+            pointBackgroundColor: "rgb(75, 192, 192)",
+          },
+        ],
+      },
+      options: {
+        responsive: false,
+        scales: {
+          x: {
+            display: true,
+            title: {
+              display: true,
+              text: "Total Time",
+            },
+            ticks: {
+              maxRotation: 0,
+              autoSkip: true,
+              precision: 0,
+            },
+          },
+          y: {
+            display: true,
+            title: {
+              display: true,
+              text: "Total Customer Number",
+            },
+            ticks: {
+              stepSize: 10,
+            },
+          },
+        },
+      },
+    });
+  </script>
+</body>
+</html>
Index: templates/table_option.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/table_option.html b/templates/table_option.html
new file mode 100644
--- /dev/null	
+++ b/templates/table_option.html	
@@ -0,0 +1,43 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Data Table</title>
+    <style>
+        table {
+            border-collapse: collapse;
+            width: 100%;
+        }
+
+        th, td {
+            border: 1px solid #dddddd;
+            text-align: left;
+            padding: 8px;
+        }
+
+        th {
+            background-color: #f2f2f2;
+        }
+    </style>
+</head>
+<body>
+<table>
+    <tr>
+        <th>Total Time</th>
+        <th>Total Customer Number</th>
+    </tr>
+    {% for out in output %}
+        {% for out2 in output2 %}
+    <tr>
+        {% set parts = out.split(',') %}
+            {% set parts2 = out2.split(',') %}
+        <td>{{ parts[0] }}</td>
+        <td>{{ parts2[0] }}</td>
+        <td>{{ parts[1] }}</td>
+        <td>{{ parts2[1] }}</td>
+    </tr>
+    {% endfor %}
+    {% endfor %}
+</table>
+</body>
+</html>
Index: simulation_results.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/simulation_results.txt b/simulation_results.txt
new file mode 100644
--- /dev/null	
+++ b/simulation_results.txt	
@@ -0,0 +1,2 @@
+[0.01, 0.012, 0.018, 0.019, 0.023, 0.026, 0.029, 0.043, 0.044, 0.045, 0.045, 0.049, 0.073, 0.088, 0.09, 0.098, 0.098, 0.098, 0.107, 0.108, 0.116, 0.125, 0.132, 0.134, 0.135, 0.138, 0.143, 0.149, 0.15, 0.15, 0.152, 0.155, 0.156, 0.156, 0.157, 0.159, 0.16, 0.16, 0.16, 0.161, 0.161, 0.162, 0.162, 0.163, 0.164, 0.164, 0.165, 0.167, 0.168, 0.168]
+[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
Index: templates/main.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>{% block title %}{% endblock %}</title>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\r\n    <link rel=\"stylesheet\" href=\"../static/home.css\">\r\n  </head>\r\n  <body class=\"bg\">\r\n    <ul class=\"navbar\">\r\n      <li style=\"background-color:rgb(234, 235, 242)\">\r\n        <a href=\"http://127.0.0.1:5000/home\" style=\"color:#2812b6; font-family:'Times New Roman', Times, serif\"><b>METUBank</b></a>\r\n      </li>\r\n      <li style=\"float:right\"><a href=\"{{ url_for('logout') }}\">Log Out</a></li>\r\n      <li style=\"float:right\"><a href=\"http://127.0.0.1:5000/settings\">Settings</a></li>\r\n      <li class=\"dropdown\">\r\n        <a href=\"javascript:void(0)\" class=\"dropbtn\">View Lists</a>\r\n        <div class=\"dropdown-content\">\r\n          <a href=\"http://127.0.0.1:5000/emp\">View Employees</a>\r\n          <a href=\"http://127.0.0.1:5000/branch\">View Branches</a>\r\n          <a href=\"http://127.0.0.1:5000/cust\">View Customers</a>\r\n        </div>\r\n      </li>\r\n      <form action=\"/run_simulation\" method=\"POST\">\r\n        <button type=\"submit\">Run Simulation</button>\r\n      </form>\r\n    </ul>\r\n\r\n    <section>\r\n      <header>\r\n        {% block header %}\r\n        {% endblock %}\r\n      </header>\r\n\r\n      {% block content %}\r\n      {% endblock %}\r\n      <pre>{{ output }}</pre>\r\n    </section>\r\n\r\n  </body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/main.html b/templates/main.html
--- a/templates/main.html	
+++ b/templates/main.html	
@@ -6,6 +6,7 @@
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
     <link rel="stylesheet" href="../static/home.css">
+    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   </head>
   <body class="bg">
     <ul class="navbar">
@@ -22,11 +23,14 @@
           <a href="http://127.0.0.1:5000/cust">View Customers</a>
         </div>
       </li>
-      <form action="/run_simulation" method="POST">
-        <button type="submit">Run Simulation</button>
-      </form>
+      <li class="dropdown">
+        <a href="javascript:void(0)" class="dropbtn">Run Simulation</a>
+        <div class="dropdown-content">
+          <a href="http://127.0.0.1:5000/table_view">Table View</a>
+          <a href="http://127.0.0.1:5000/graph_view">Graph View</a>
+        </div>
+      </li>
     </ul>
-
     <section>
       <header>
         {% block header %}
@@ -35,8 +39,6 @@
 
       {% block content %}
       {% endblock %}
-      <pre>{{ output }}</pre>
     </section>
-
   </body>
 </html>
Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\nclass Server:\r\n    def __init__(self, id):\r\n        self.id = id\r\n        self.is_available = True\r\n\r\n    def is_available(self):\r\n        return self.is_available\r\n\r\n    def change_busy_status(self):\r\n        self.is_available = not self.is_available\r\n\r\n    def print_server_details(self):\r\n        print(f\"Server {self.id} details:\")\r\n        print(f\"Customers: {self.customers}\")\r\n        print(f\"Is busy: {self.is_busy}\")\r\n        print(f\"Current departure time: {self.current_departure_time}\")\r\n        print(f\"Last departure time: {self.last_departure_time}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server.py b/server.py
--- a/server.py	
+++ b/server.py	
@@ -11,9 +11,9 @@
     def change_busy_status(self):
         self.is_available = not self.is_available
 
-    def print_server_details(self):
+    """def print_server_details(self):
         print(f"Server {self.id} details:")
         print(f"Customers: {self.customers}")
         print(f"Is busy: {self.is_busy}")
         print(f"Current departure time: {self.current_departure_time}")
-        print(f"Last departure time: {self.last_departure_time}")
+        print(f"Last departure time: {self.last_departure_time}")"""
Index: database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from db_config import db\r\nfrom datetime import datetime\r\n\r\n\r\nclass Database:\r\n    total_customer = 0\r\n    arrival_rate = 0\r\n    service_rate = 0\r\n    no_of_servers = 0\r\n    priority_list = []\r\n    total_service_time = 0\r\n    total_arrival_time = 0\r\n    arrival_interval_list = []\r\n    arrival_interval_list.append(0)\r\n\r\n    def __init__(self, total_customer, arrival_rate, service_rate, no_of_servers, priorty_list):\r\n        self.total_customer = total_customer\r\n        self.arrival_rate = arrival_rate\r\n        self.service_rate = service_rate\r\n        self.no_of_servers = no_of_servers\r\n        self.priorty_list = priorty_list\r\n\r\n    def print_metrics(self, total_customer, arrival_rate, service_rate, no_of_servers, priority_list, total_service_time,\r\n                      total_arrival_time, arrival_interval_list):\r\n        print(\"-------------------\")\r\n        print(\"Total Customer: \", total_customer)\r\n        print(\"Total Arrival Time: \", total_arrival_time)\r\n        print(\"Total Service Time: \", total_service_time)\r\n        print(\"Average Service Time: \", total_service_time/total_customer)\r\n        print(\"Priority List: \", priority_list)\r\n        print(\"Length of Priority List: \", len(priority_list))\r\n        print(\"Arrival Interval List: \", arrival_interval_list)\r\n        print(\"Length of Arrival Interval List: \", len(arrival_interval_list))\r\n        print(\"Arrival Rate: \", arrival_rate)\r\n        print(\"Service Rate: \", service_rate)\r\n        print(\"No of servers: \", no_of_servers)\r\n\r\n        print(\"-------------------\")\r\n\r\n    def create_arrival_rate(self, arrival_interval_list):\r\n        sum_arrival = 0\r\n        for i in range(len(arrival_interval_list)):\r\n            sum_arrival += arrival_interval_list[i]\r\n\r\n        arrival_rate = sum_arrival/len(arrival_interval_list)\r\n        # convert into hours\r\n        arrival_rate = 1/(arrival_rate/3600)\r\n        print(\"Arrival Rate: \", arrival_rate)\r\n\r\n        return arrival_rate\r\n\r\n    def create_service_rate(self, total_service_time, total_customer):\r\n        service_rate = total_service_time/total_customer\r\n        # convert into hours\r\n        service_rate = 1/(service_rate/3600)\r\n        print(\"Service Rate: \", service_rate)\r\n\r\n        return service_rate\r\n\r\n    def find_server_no(self):\r\n        # No of servers can be read\r\n        employees_ref = db.collection(u'Employees')\r\n        docs = employees_ref.stream()\r\n        for doc in docs:\r\n            self.no_of_servers += 1\r\n        print(\"No of servers: \", self.no_of_servers)\r\n\r\n    def retrieve_data(self):\r\n        # All customer data can be read\r\n        customers_ref = db.collection(u'Tickets')\r\n        docs = customers_ref.stream()\r\n\r\n        for doc in docs:\r\n            self.total_customer += 1\r\n            # Arrival time can be read as a string and converted to time object (seconds)\r\n            arrival_time = doc.to_dict()['date_time']\r\n            arrival_time = arrival_time.split('at')[1]\r\n            arrival_time = arrival_time.strip()\r\n            arrival_time = arrival_time.split(' ')[0]\r\n            arrival_time = datetime.strptime(arrival_time, '%H:%M:%S').time()\r\n            arrival_time = arrival_time.hour * 3600 + \\\r\n                arrival_time.minute * 60 + arrival_time.second\r\n            self.total_arrival_time += arrival_time\r\n            self.arrival_interval_list.append(\r\n                abs(arrival_time - self.arrival_interval_list[-1]))\r\n\r\n            # Process time can be read as a string and converted to time object (seconds)\r\n            process_time = doc.to_dict()['total_process_time']\r\n            if process_time is not None:\r\n                # if process_time has min and s in it\r\n                if 'min' in process_time and 's' in process_time:\r\n                    process_time = process_time.split('min')\r\n                    process_time[1] = process_time[1].split('s')[0]\r\n                    process_time = float(process_time[0]) * \\\r\n                        60 + float((process_time[1].split('s'))[0])\r\n                # if process_time has only s in it\r\n                elif 's' in process_time:\r\n                    process_time = float(process_time.split('s')[0])\r\n\r\n                self.total_service_time += process_time\r\n\r\n            # Priority can be read as a string and converted to int and also added to a list\r\n            priority_value = doc.to_dict()['priority']\r\n            if priority_value is not None:\r\n                self.priority_list.append(priority_value)\r\n\r\n            # Print customer details\r\n            print_customer_details(doc.id, arrival_time,\r\n                                   process_time, priority_value)\r\n\r\n\r\ndef print_customer_details(doc_id, arrival_time, process_time, priority):\r\n    print(\"-------------------\")\r\n    print(\"Customer ID: \", doc_id)\r\n    print(\"Arrival Time: \", arrival_time)\r\n    print(\"Process Time: \", process_time)\r\n    print(\"Priority: \", priority)\r\n    print(\"-------------------\")\r\n\r\n\r\nmain = Database(0, 0, 0, 0, [])\r\nmain.find_server_no()\r\nmain.retrieve_data()\r\n\r\nmain.arrival_rate = main.create_arrival_rate(main.arrival_interval_list)\r\nmain.service_rate = main.create_service_rate(\r\n    main.total_service_time, main.total_customer)\r\n\r\nmain.print_metrics(main.total_customer, main.arrival_rate, main.service_rate, main.no_of_servers, main.priority_list, main.total_service_time,\r\n                   main.total_arrival_time, main.arrival_interval_list)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database.py b/database.py
--- a/database.py	
+++ b/database.py	
@@ -20,7 +20,7 @@
         self.no_of_servers = no_of_servers
         self.priorty_list = priorty_list
 
-    def print_metrics(self, total_customer, arrival_rate, service_rate, no_of_servers, priority_list, total_service_time,
+    """def print_metrics(self, total_customer, arrival_rate, service_rate, no_of_servers, priority_list, total_service_time,
                       total_arrival_time, arrival_interval_list):
         print("-------------------")
         print("Total Customer: ", total_customer)
@@ -35,7 +35,7 @@
         print("Service Rate: ", service_rate)
         print("No of servers: ", no_of_servers)
 
-        print("-------------------")
+        print("-------------------")"""
 
     def create_arrival_rate(self, arrival_interval_list):
         sum_arrival = 0
@@ -109,13 +109,13 @@
                                    process_time, priority_value)
 
 
-def print_customer_details(doc_id, arrival_time, process_time, priority):
+"""def print_customer_details(doc_id, arrival_time, process_time, priority):
     print("-------------------")
     print("Customer ID: ", doc_id)
     print("Arrival Time: ", arrival_time)
     print("Process Time: ", process_time)
     print("Priority: ", priority)
-    print("-------------------")
+    print("-------------------")"""
 
 
 main = Database(0, 0, 0, 0, [])
Index: customer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\n\r\n\r\nclass Customer:\r\n    def __init__(self, id, arrival_time, service_time, priority):\r\n        self.id = id\r\n        self.arrival_time = arrival_time\r\n        self.service_time = service_time\r\n        self.service_start_time = 0.0  # leaving time from queue\r\n        self.departure_time = 0.0  # leaving time from bank\r\n        self.wait_time = 0.0  # time spent in queue\r\n        self.priority = priority  # priority of customer\r\n        self.server_no = 0\r\n\r\n    def __repr__(self):\r\n        return f\"Customer {self.id}\"\r\n\r\n    def print_customer_details(self):\r\n        print(f\"\\n\\nCustomer {self.id} details:\")\r\n        print(f\"Arrival time: {self.arrival_time:.2f}\")\r\n        print(f\"Service time: {self.service_time:.2f}\")\r\n        print(f\"Service start time: {self.service_start_time:.2f}\")\r\n        print(f\"Departure time: {self.departure_time:.2f}\")\r\n        print(f\"Wait time: {self.wait_time:.2f}\")\r\n        print(f\"Priority: {self.priority}\")\r\n        print(f\"Server no: {self.server_no}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customer.py b/customer.py
--- a/customer.py	
+++ b/customer.py	
@@ -15,7 +15,7 @@
     def __repr__(self):
         return f"Customer {self.id}"
 
-    def print_customer_details(self):
+    """def print_customer_details(self):
         print(f"\n\nCustomer {self.id} details:")
         print(f"Arrival time: {self.arrival_time:.2f}")
         print(f"Service time: {self.service_time:.2f}")
@@ -23,4 +23,4 @@
         print(f"Departure time: {self.departure_time:.2f}")
         print(f"Wait time: {self.wait_time:.2f}")
         print(f"Priority: {self.priority}")
-        print(f"Server no: {self.server_no}")
+        print(f"Server no: {self.server_no}")"""
Index: bank_simulation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from customer import Customer\r\nfrom server import Server\r\nfrom bankqueue import Queue\r\nimport random\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport time\r\n\r\n\r\nclass BankSimulation:\r\n    servers = []  # This list holds the servers\r\n    queue = []  # This list holds the customers that are in the queue\r\n    list_customers = []  # This list holds the customers that are not in the service\r\n    # This list holds the customers that are in the any service\r\n    after_service_start_list = []\r\n    total_served_customers = 0\r\n    total_service_time = 0\r\n    total_wait_time = 0\r\n    total_waiting_customers = 0\r\n    num_servers = 0\r\n    arrival_rate = 0\r\n    service_rate = 0\r\n    simulation_customer_number = 0\r\n    simulation_time = 0\r\n    total_entry_time = 0\r\n    total_exit_time = 0\r\n    priority_list = []\r\n\r\n    def __init__(\r\n        self, simulation_customer_number, arrival_rate, service_rate, num_servers, priority_list\r\n    ):\r\n        self.num_servers = num_servers\r\n        self.arrival_rate = arrival_rate\r\n        self.service_rate = service_rate\r\n        self.simulation_customer_number = simulation_customer_number\r\n        self.priority_list = priority_list\r\n\r\n    def initialize_servers(self):\r\n        for i in range(self.num_servers):\r\n            self.servers.append(Server(i + 1))\r\n\r\n    def initialize_queue(self):\r\n        self.queue = Queue()\r\n\r\n    # This method generates the customers and sorts them according to their arrival time\r\n    def initialize_customers(self):\r\n        for i in range(self.simulation_customer_number):\r\n            if i == 0:\r\n                arrival_time = np.random.exponential(\r\n                    scale=1 / self.arrival_rate)\r\n            else:\r\n                arrival_time = np.random.exponential(\r\n                    scale=1 / self.arrival_rate) + self.list_customers[i-1].arrival_time\r\n            service_time = np.random.exponential(scale=1 / self.service_rate)\r\n            self.list_customers.append(\r\n                Customer(i + 1, arrival_time, service_time, self.priority_list[i]))\r\n        self.list_customers.sort(key=lambda x: x.arrival_time)\r\n\r\n    def initialize_simulation(self):\r\n        self.initialize_servers()\r\n        self.initialize_queue()\r\n        self.initialize_customers()\r\n\r\n    # This method checks if the all servers are busy or not\r\n    def all_servers_busy(self):\r\n        for i in range(len(self.servers)):\r\n            if self.servers[i].is_available:\r\n                return False\r\n        return True\r\n\r\n    def calculate_metrics(self):\r\n        print(f\"\\n**********************************************************\\n\")\r\n\r\n        print(\"Calculating metrics...\")\r\n        print(f\"Total customers: {self.total_served_customers}\")\r\n        print(f\"Total service time: {self.total_service_time}\")\r\n        print(f\"Total wait time: {self.total_wait_time}\")\r\n        print(f\"Total waiting customers: {self.total_waiting_customers}\")\r\n        print(f\"\\n**********************************************************\\n\")\r\n        print(\r\n            f\"Average service time: {self.total_service_time/self.total_served_customers}\")\r\n        if self.total_waiting_customers == 0:\r\n            print(\"Average wait time: 0\")\r\n        else:\r\n            print(\r\n                f\"Average wait time: {self.total_wait_time/self.total_waiting_customers}\"\r\n            )\r\n\r\n        print(\r\n            f\"Average number of customers in the queue (Not sure): {(self.total_wait_time/self.simulation_time)}\"\r\n        )\r\n        # Average number of customers in the system\r\n        print(\r\n            f\"Average number of customers in the system (Not sure): {self.total_service_time/self.simulation_time}\"\r\n        )\r\n        print(f\"Simulation Time: {self.simulation_time}\")\r\n        print(f\"Total exit time: {self.total_exit_time}\")\r\n\r\n        print(f\"\\n**********************************************************\\n\")\r\n\r\n        rho = self.arrival_rate / (self.num_servers * self.service_rate)\r\n        print(f\"Rho : {rho}\")\r\n\r\n        print(f\"Gelmesi gereken result : {rho/(1-rho)}\")\r\n\r\n        print(f\"Alinan sonuc: {self.total_exit_time/self.simulation_time}\")\r\n\r\n        print(f\"\\n**********************************************************\\n\")\r\n\r\n        # waiting time in the system\r\n        print(\r\n            f\"Waiting time in the system: {self.total_wait_time+self.total_service_time}\"\r\n        )\r\n\r\n        # average waiting time in the system\r\n        print(\r\n            f\"Average waiting time in the system (Ws OK): {(self.total_wait_time+self.total_service_time)/self.total_served_customers}\"\r\n        )\r\n\r\n        # average number of customers in the system\r\n        print(\r\n            f\"Average number of customers in the system (Ls) (OK): {(self.total_service_time/self.simulation_time)+(self.total_wait_time/self.simulation_time)}\"\r\n        )\r\n\r\n        # average waiting time in the queue\r\n        print(\r\n            f\"Average waiting time in the queue (Wq)(ok): {(self.total_wait_time/self.total_waiting_customers)}\"\r\n        )\r\n\r\n        # average number of customers in the queue\r\n        print(\r\n            f\"Average number of customers in the queue (Lq): {self.total_wait_time/self.simulation_time}\"\r\n        )\r\n\r\n\r\ndef simulation(simulation_customer_number, arrival_rate, service_rate, num_servers, priority_list):\r\n    bankSimulation = BankSimulation(\r\n        simulation_customer_number, arrival_rate, service_rate, num_servers, priority_list\r\n    )\r\n    bankSimulation.initialize_simulation()\r\n    print(\"Simulation started.\")\r\n    arrived_customer_number = 0\r\n    print(bankSimulation.list_customers)\r\n    print(\"Simulation started.\")\r\n    for i in range(len(bankSimulation.list_customers)):\r\n        bankSimulation.list_customers[i].print_customer_details()\r\n    print(bankSimulation.simulation_customer_number)\r\n    print(bankSimulation.total_served_customers)\r\n    print(bankSimulation.after_service_start_list)\r\n    print(bankSimulation.queue)\r\n    # Initialize timer variables\r\n    timer_total_time = []\r\n    timer_total_customers = []\r\n    # Start the timer\r\n    timer_start_time = time.time()\r\n    while bankSimulation.total_served_customers < bankSimulation.simulation_customer_number:\r\n        print(f\"Simulation time: {bankSimulation.simulation_time}\")\r\n        print(\r\n            f\"Total served customers: {bankSimulation.total_served_customers}\")\r\n        print(\r\n            f\"Total waiting customers: {bankSimulation.total_waiting_customers}\")\r\n        print(f\"Total service time: {bankSimulation.total_service_time}\")\r\n        print(f\"Total wait time: {bankSimulation.total_wait_time}\")\r\n\r\n        # Complete Service Event\r\n        print(\"complete service event\")\r\n\r\n        \"\"\" This loop checks the customers service time.\r\n                If a customer service time + start time is equal to\r\n                current time, server that assigned for that customer\r\n                will be free again. Also that customer will become served. \"\"\"\r\n        print(bankSimulation.after_service_start_list)\r\n\r\n        if len(bankSimulation.after_service_start_list) != 0:\r\n            after_service_start_loop = 0\r\n            while after_service_start_loop < len(bankSimulation.after_service_start_list):\r\n                customer = bankSimulation.after_service_start_list[after_service_start_loop]\r\n                print(bankSimulation.simulation_time)\r\n                print(customer.service_start_time + customer.service_time)\r\n                if (customer.service_start_time + customer.service_time) <= bankSimulation.simulation_time:\r\n                    print(\"complete service yapar\\n\\n\")\r\n\r\n                    bankSimulation.servers[customer.server_no -\r\n                                           1].is_available = True\r\n                    customer.departure_time = bankSimulation.simulation_time\r\n                    customer.wait_time = customer.service_start_time - customer.arrival_time\r\n                    bankSimulation.total_wait_time += customer.wait_time\r\n                    bankSimulation.total_served_customers += 1\r\n                    bankSimulation.total_exit_time += (\r\n                        customer.departure_time - customer.arrival_time)\r\n                    bankSimulation.total_service_time += customer.service_time\r\n                    print(bankSimulation.total_served_customers)\r\n                    bankSimulation.after_service_start_list.pop(\r\n                        after_service_start_loop)\r\n                    print(bankSimulation.after_service_start_list)\r\n                after_service_start_loop += 1\r\n        # Arrival Event\r\n        print(\"arrival event\")\r\n        arrival_loop = 0\r\n        while arrival_loop < len(bankSimulation.list_customers):\r\n\r\n            if bankSimulation.simulation_time >= bankSimulation.list_customers[0].arrival_time:\r\n                print(\"arrival yapar\\n\")\r\n                # Update timer\r\n                timer_elapsed_time = time.time() - timer_start_time\r\n                timer_total_time.append(timer_elapsed_time)\r\n                timer_total_customers.append(arrived_customer_number)\r\n                arrived_customer_number += 1\r\n                if bankSimulation.all_servers_busy() and (bankSimulation.queue.size) != 0:\r\n                    arrived_customer = bankSimulation.list_customers[0]\r\n                    # method call\r\n                    bankSimulation.queue.enqueue(arrived_customer)\r\n                    bankSimulation.total_waiting_customers += 1\r\n                    bankSimulation.list_customers.pop(0)\r\n                    bankSimulation.queue.print_queue_details()\r\n                    print(\"queueye eklendi\\n\\n\")\r\n                    print(\"listeden doğru kaldırılıdı mı? queue ya atıldı ama \",\r\n                          bankSimulation.list_customers)\r\n\r\n                else:\r\n                    # Serving the customer to server directly (No queue option)\r\n                    for i in range(len(bankSimulation.servers)):\r\n                        if bankSimulation.servers[i].is_available:\r\n                            arrived_customer = bankSimulation.list_customers[0]\r\n                            bankSimulation.list_customers.pop(0)\r\n\r\n                            arrived_customer.server_no = i + 1\r\n                            arrived_customer.arrival_time = bankSimulation.simulation_time\r\n                            arrived_customer.service_start_time = bankSimulation.simulation_time\r\n                            bankSimulation.after_service_start_list.append(\r\n                                arrived_customer)\r\n                            bankSimulation.servers[i].is_available = False\r\n                            print(bankSimulation.after_service_start_list)\r\n                            print(\"serving the customer to server directly\\n\\n\")\r\n                            break\r\n            arrival_loop += 1\r\n        # Start Service Event\r\n        print(\"start service event\")\r\n        # In here, the customers in the queue will be sended to the counters.\r\n        for i in range(len(bankSimulation.servers)):\r\n\r\n            if bankSimulation.servers[i].is_available == True and bankSimulation.queue.size() != 0:\r\n                print(\"start service yapar\\n\\n\")\r\n                customer = bankSimulation.queue.dequeue()\r\n                customer.server_no = i+1\r\n                customer.service_start_time = bankSimulation.simulation_time\r\n                bankSimulation.after_service_start_list.append(customer)\r\n                bankSimulation.servers[i].is_available = False\r\n\r\n        bankSimulation.simulation_time += 0.0005\r\n\r\n    print(\"Simulation ended.\")\r\n    print(\"Sim time: \", time.time()-timer_start_time)\r\n\r\n    bankSimulation.calculate_metrics()\r\n    # Plot the graph\r\n    plt.plot(timer_total_time, timer_total_customers)\r\n    plt.xlabel('Total Time (seconds)')\r\n    plt.ylabel('Total Customer Number')\r\n    plt.title('Graph of Total Time vs Total Customer Number')\r\n    plt.show()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    simulation(50, 3, 4, 1, [1]*50)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bank_simulation.py b/bank_simulation.py
--- a/bank_simulation.py	
+++ b/bank_simulation.py	
@@ -69,68 +69,51 @@
         return True
 
     def calculate_metrics(self):
-        print(f"\n**********************************************************\n")
+        #print(f"\n**********************************************************\n")
 
-        print("Calculating metrics...")
-        print(f"Total customers: {self.total_served_customers}")
-        print(f"Total service time: {self.total_service_time}")
-        print(f"Total wait time: {self.total_wait_time}")
-        print(f"Total waiting customers: {self.total_waiting_customers}")
-        print(f"\n**********************************************************\n")
-        print(
-            f"Average service time: {self.total_service_time/self.total_served_customers}")
-        if self.total_waiting_customers == 0:
-            print("Average wait time: 0")
-        else:
-            print(
-                f"Average wait time: {self.total_wait_time/self.total_waiting_customers}"
-            )
+        #print("Calculating metrics...")
+        #print(f"Total customers: {self.total_served_customers}")
+        #print(f"Total service time: {self.total_service_time}")
+        #print(f"Total wait time: {self.total_wait_time}")
+        #print(f"Total waiting customers: {self.total_waiting_customers}")
+        #print(f"\n**********************************************************\n")
+        #print( f"Average service time: {self.total_service_time/self.total_served_customers}")
+        #if self.total_waiting_customers == 0:
+            #print("Average wait time: 0")
+        #else:
+            #print(f"Average wait time: {self.total_wait_time/self.total_waiting_customers}")
 
-        print(
-            f"Average number of customers in the queue (Not sure): {(self.total_wait_time/self.simulation_time)}"
-        )
+        #print(f"Average number of customers in the queue (Not sure): {(self.total_wait_time/self.simulation_time)}")
         # Average number of customers in the system
-        print(
-            f"Average number of customers in the system (Not sure): {self.total_service_time/self.simulation_time}"
-        )
-        print(f"Simulation Time: {self.simulation_time}")
-        print(f"Total exit time: {self.total_exit_time}")
+        #print(f"Average number of customers in the system (Not sure): {self.total_service_time/self.simulation_time}")
+        #print(f"Simulation Time: {self.simulation_time}")
+        #print(f"Total exit time: {self.total_exit_time}")
 
-        print(f"\n**********************************************************\n")
+        #print(f"\n**********************************************************\n")
 
         rho = self.arrival_rate / (self.num_servers * self.service_rate)
-        print(f"Rho : {rho}")
+        #print(f"Rho : {rho}")
 
-        print(f"Gelmesi gereken result : {rho/(1-rho)}")
+        #print(f"Gelmesi gereken result : {rho/(1-rho)}")
 
-        print(f"Alinan sonuc: {self.total_exit_time/self.simulation_time}")
+        #print(f"Alinan sonuc: {self.total_exit_time/self.simulation_time}")
 
-        print(f"\n**********************************************************\n")
+        #print(f"\n**********************************************************\n")
 
         # waiting time in the system
-        print(
-            f"Waiting time in the system: {self.total_wait_time+self.total_service_time}"
-        )
+        #print(f"Waiting time in the system: {self.total_wait_time+self.total_service_time}")
 
         # average waiting time in the system
-        print(
-            f"Average waiting time in the system (Ws OK): {(self.total_wait_time+self.total_service_time)/self.total_served_customers}"
-        )
+        #print(f"Average waiting time in the system (Ws OK): {(self.total_wait_time+self.total_service_time)/self.total_served_customers}")
 
         # average number of customers in the system
-        print(
-            f"Average number of customers in the system (Ls) (OK): {(self.total_service_time/self.simulation_time)+(self.total_wait_time/self.simulation_time)}"
-        )
+        #print(f"Average number of customers in the system (Ls) (OK): {(self.total_service_time/self.simulation_time)+(self.total_wait_time/self.simulation_time)}")
 
         # average waiting time in the queue
-        print(
-            f"Average waiting time in the queue (Wq)(ok): {(self.total_wait_time/self.total_waiting_customers)}"
-        )
+        #print(f"Average waiting time in the queue (Wq)(ok): {(self.total_wait_time/self.total_waiting_customers)}")
 
         # average number of customers in the queue
-        print(
-            f"Average number of customers in the queue (Lq): {self.total_wait_time/self.simulation_time}"
-        )
+        #print(f"Average number of customers in the queue (Lq): {self.total_wait_time/self.simulation_time}")
 
 
 def simulation(simulation_customer_number, arrival_rate, service_rate, num_servers, priority_list):
@@ -138,47 +121,45 @@
         simulation_customer_number, arrival_rate, service_rate, num_servers, priority_list
     )
     bankSimulation.initialize_simulation()
-    print("Simulation started.")
+    #print("Simulation started.")
     arrived_customer_number = 0
-    print(bankSimulation.list_customers)
-    print("Simulation started.")
-    for i in range(len(bankSimulation.list_customers)):
-        bankSimulation.list_customers[i].print_customer_details()
-    print(bankSimulation.simulation_customer_number)
-    print(bankSimulation.total_served_customers)
-    print(bankSimulation.after_service_start_list)
-    print(bankSimulation.queue)
+    #print(bankSimulation.list_customers)
+    #print("Simulation started.")
+    #for i in range(len(bankSimulation.list_customers)):
+        #bankSimulation.list_customers[i].print_customer_details()
+    #print(bankSimulation.simulation_customer_number)
+    #print(bankSimulation.total_served_customers)
+    #print(bankSimulation.after_service_start_list)
+    #print(bankSimulation.queue)
     # Initialize timer variables
     timer_total_time = []
     timer_total_customers = []
     # Start the timer
     timer_start_time = time.time()
     while bankSimulation.total_served_customers < bankSimulation.simulation_customer_number:
-        print(f"Simulation time: {bankSimulation.simulation_time}")
-        print(
-            f"Total served customers: {bankSimulation.total_served_customers}")
-        print(
-            f"Total waiting customers: {bankSimulation.total_waiting_customers}")
-        print(f"Total service time: {bankSimulation.total_service_time}")
-        print(f"Total wait time: {bankSimulation.total_wait_time}")
+        #print(f"Simulation time: {bankSimulation.simulation_time}")
+        #print(f"Total served customers: {bankSimulation.total_served_customers}")
+        #print(f"Total waiting customers: {bankSimulation.total_waiting_customers}")
+        #print(f"Total service time: {bankSimulation.total_service_time}")
+        #print(f"Total wait time: {bankSimulation.total_wait_time}")
 
         # Complete Service Event
-        print("complete service event")
+        #print("complete service event")
 
         """ This loop checks the customers service time.
                 If a customer service time + start time is equal to
                 current time, server that assigned for that customer
                 will be free again. Also that customer will become served. """
-        print(bankSimulation.after_service_start_list)
+        #print(bankSimulation.after_service_start_list)
 
         if len(bankSimulation.after_service_start_list) != 0:
             after_service_start_loop = 0
             while after_service_start_loop < len(bankSimulation.after_service_start_list):
                 customer = bankSimulation.after_service_start_list[after_service_start_loop]
-                print(bankSimulation.simulation_time)
-                print(customer.service_start_time + customer.service_time)
+                #print(bankSimulation.simulation_time)
+                #print(customer.service_start_time + customer.service_time)
                 if (customer.service_start_time + customer.service_time) <= bankSimulation.simulation_time:
-                    print("complete service yapar\n\n")
+                    #print("complete service yapar\n\n")
 
                     bankSimulation.servers[customer.server_no -
                                            1].is_available = True
@@ -189,18 +170,18 @@
                     bankSimulation.total_exit_time += (
                         customer.departure_time - customer.arrival_time)
                     bankSimulation.total_service_time += customer.service_time
-                    print(bankSimulation.total_served_customers)
+                    #print(bankSimulation.total_served_customers)
                     bankSimulation.after_service_start_list.pop(
                         after_service_start_loop)
-                    print(bankSimulation.after_service_start_list)
+                    #print(bankSimulation.after_service_start_list)
                 after_service_start_loop += 1
         # Arrival Event
-        print("arrival event")
+        #print("arrival event")
         arrival_loop = 0
         while arrival_loop < len(bankSimulation.list_customers):
 
             if bankSimulation.simulation_time >= bankSimulation.list_customers[0].arrival_time:
-                print("arrival yapar\n")
+                #print("arrival yapar\n")
                 # Update timer
                 timer_elapsed_time = time.time() - timer_start_time
                 timer_total_time.append(timer_elapsed_time)
@@ -212,10 +193,9 @@
                     bankSimulation.queue.enqueue(arrived_customer)
                     bankSimulation.total_waiting_customers += 1
                     bankSimulation.list_customers.pop(0)
-                    bankSimulation.queue.print_queue_details()
-                    print("queueye eklendi\n\n")
-                    print("listeden doğru kaldırılıdı mı? queue ya atıldı ama ",
-                          bankSimulation.list_customers)
+                    #bankSimulation.queue.print_queue_details()
+                    #print("queueye eklendi\n\n")
+                    #print("listeden doğru kaldırılıdı mı? queue ya atıldı ama ",bankSimulation.list_customers)
 
                 else:
                     # Serving the customer to server directly (No queue option)
@@ -227,20 +207,19 @@
                             arrived_customer.server_no = i + 1
                             arrived_customer.arrival_time = bankSimulation.simulation_time
                             arrived_customer.service_start_time = bankSimulation.simulation_time
-                            bankSimulation.after_service_start_list.append(
-                                arrived_customer)
+                            bankSimulation.after_service_start_list.append(arrived_customer)
                             bankSimulation.servers[i].is_available = False
-                            print(bankSimulation.after_service_start_list)
-                            print("serving the customer to server directly\n\n")
+                            #print(bankSimulation.after_service_start_list)
+                            #print("serving the customer to server directly\n\n")
                             break
             arrival_loop += 1
         # Start Service Event
-        print("start service event")
+        #print("start service event")
         # In here, the customers in the queue will be sended to the counters.
         for i in range(len(bankSimulation.servers)):
 
             if bankSimulation.servers[i].is_available == True and bankSimulation.queue.size() != 0:
-                print("start service yapar\n\n")
+                #print("start service yapar\n\n")
                 customer = bankSimulation.queue.dequeue()
                 customer.server_no = i+1
                 customer.service_start_time = bankSimulation.simulation_time
@@ -249,16 +228,16 @@
 
         bankSimulation.simulation_time += 0.0005
 
-    print("Simulation ended.")
-    print("Sim time: ", time.time()-timer_start_time)
+    #print("Simulation ended.")
+    #print("Sim time: ", time.time()-timer_start_time)
 
     bankSimulation.calculate_metrics()
-    # Plot the graph
-    plt.plot(timer_total_time, timer_total_customers)
-    plt.xlabel('Total Time (seconds)')
-    plt.ylabel('Total Customer Number')
-    plt.title('Graph of Total Time vs Total Customer Number')
-    plt.show()
+    round_timer_total_time = [round(num,3) for num in timer_total_time]
+    round_timer_total_customer = [round(num,3) for num in timer_total_customers]
+
+    with open('simulation_results.txt', 'w') as file:
+        file.write(f"{round_timer_total_time}\n")
+        file.write(f"{round_timer_total_customer}\n")
 
 
 if __name__ == "__main__":
Index: bankqueue.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Queue:\r\n    def __init__(self):\r\n        self.customers = []\r\n\r\n    def isEmpty(self):\r\n        return self.customers == []\r\n\r\n    def enqueue(self, customer):\r\n        # adding customer with priority\r\n        if self.isEmpty():\r\n            self.customers.append(customer)\r\n        else:\r\n            for i in range(len(self.customers)):\r\n                if customer.priority < self.customers[i].priority:\r\n                    self.customers.insert(i, customer)\r\n                    print(\"Enqueue priority \")\r\n                    priorities = []\r\n                    for i in range(len(self.customers)):\r\n                        priorities.append(self.customers[i].priority)\r\n                    print(priorities)\r\n\r\n                    for i in range(len(self.customers)):\r\n                        self.customers[i].print_customer_details()\r\n                    return\r\n            self.customers.append(customer)\r\n            print(\"Enqueue normal\")\r\n\r\n    def dequeue(self):\r\n        if not self.customers:\r\n            return None\r\n\r\n        customer = self.customers.pop(0)  # FIFO\r\n        print(\"Dequeue method called. CUSTOMER SHOULD BE SERVED. (DEQUEUE)\")\r\n        return customer\r\n\r\n    def size(self):\r\n        return len(self.customers)\r\n\r\n    def print_queue_details(self):\r\n        print(f\"Queue details:\")\r\n        print(f\"Queue: {self.customers}\")\r\n        print(f\"Queue size: {self.size()}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bankqueue.py b/bankqueue.py
--- a/bankqueue.py	
+++ b/bankqueue.py	
@@ -13,30 +13,30 @@
             for i in range(len(self.customers)):
                 if customer.priority < self.customers[i].priority:
                     self.customers.insert(i, customer)
-                    print("Enqueue priority ")
+                    #print("Enqueue priority ")
                     priorities = []
                     for i in range(len(self.customers)):
                         priorities.append(self.customers[i].priority)
-                    print(priorities)
+                    #print(priorities)
 
                     for i in range(len(self.customers)):
                         self.customers[i].print_customer_details()
                     return
             self.customers.append(customer)
-            print("Enqueue normal")
+            #print("Enqueue normal")
 
     def dequeue(self):
         if not self.customers:
             return None
 
         customer = self.customers.pop(0)  # FIFO
-        print("Dequeue method called. CUSTOMER SHOULD BE SERVED. (DEQUEUE)")
+        #print("Dequeue method called. CUSTOMER SHOULD BE SERVED. (DEQUEUE)")
         return customer
 
     def size(self):
         return len(self.customers)
 
-    def print_queue_details(self):
-        print(f"Queue details:")
-        print(f"Queue: {self.customers}")
-        print(f"Queue size: {self.size()}")
+    #def print_queue_details(self):
+        #print(f"Queue details:")
+        #print(f"Queue: {self.customers}")
+        #print(f"Queue size: {self.size()}")
