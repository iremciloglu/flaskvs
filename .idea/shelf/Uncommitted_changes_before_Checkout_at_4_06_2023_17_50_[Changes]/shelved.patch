Index: templates/simulation.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n{% block header %}\r\n<title>{% block title %}Simulation Page{% endblock %}</title>\r\n  <link rel=\"stylesheet\" href=\"../static/home.css\">\r\n  <link rel=\"stylesheet\" href=\"../static/view_list.css\">\r\n  {% endblock %}\r\n {% extends 'main.html' %}\r\n  {% block content %}\r\n    <h1>Simulation </h1>\r\n    <h2>We can not create data twice without changing the name and surname list, at least change the surname list with all new surnames.</h2>\r\n    <a href=\"http://127.0.0.1:5000/simulation_loop\" class=\"button\">Data Create Start</a>\r\n\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/simulation.html b/templates/simulation.html
--- a/templates/simulation.html	
+++ b/templates/simulation.html	
@@ -7,7 +7,28 @@
  {% extends 'main.html' %}
   {% block content %}
     <h1>Simulation </h1>
-    <h2>We can not create data twice without changing the name and surname list, at least change the surname list with all new surnames.</h2>
-    <a href="http://127.0.0.1:5000/simulation_loop" class="button">Data Create Start</a>
 
-{% endblock %}
+    <canvas id="lineChartSim" width="400" height="400"></canvas>
+  <script>
+    var ctx=document.getElementById("lineChartSim").getContext("2d");
+    var lineChartWeekly= new Chart(ctx,{
+      type:"line",
+      data:{
+        labels: {{ timer_total_customers|tojson }},
+        datasets:[
+        {
+          label:"Customers",
+          data: {{ timer_total_time|tojson }},
+          fill: false,
+          borderColor:"rgb(75,192,192)",
+          lineTension: 0.1
+        }
+        ]
+      },
+      options:{
+        responsive:false
+      }
+    });
+    </script>
+
+{% endblock %}
\ No newline at end of file
Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import *\r\nfrom firebase_admin import credentials, auth\r\nfrom flask_firebase_admin import FirebaseAdmin\r\nfrom flask_wtf import FlaskForm\r\nfrom flask_login import login_required, LoginManager,login_user,logout_user\r\nfrom wtforms import StringField, SubmitField\r\nfrom wtforms.validators import DataRequired\r\nimport os\r\nimport base64\r\nimport bcrypt\r\nfrom datetime import date, datetime, timedelta\r\nimport random\r\nimport subprocess\r\nimport calendar\r\n\r\n\r\napp = Flask(__name__)\r\nSECRET_KEY = os.urandom(32)\r\napp.config['SECRET_KEY'] = SECRET_KEY\r\ncert = {\r\n        \"type\": \"service_account\",\r\n        \"project_id\": \"firestore491test\",\r\n        \"private_key_id\": \"5e88bfeaa543c68726e84cd605cafc1b739a238e\",\r\n        \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCxzQxnf6ARarYE\\nTnTMUB5ZE0Lf19/qOe9ygj5LC7enZzgMw9+YrQP6O7i/sEcIsjC/RDN8hYblSUTO\\n0yHdorat226HgA5UNw8GRQ6JnM+7UVyTSIQrtYp0Ci3ITTeStAgg1iSLk9xjtijI\\nlPQNBELESaO1SUMYtG/XikyYhwgEX0WIkq4ZemWEHLgk2fxvUAWxsREQjCtrTqJw\\nMr4CqcO2tWs5nf2aYHz+SpHkxIjF5/0TyLlxCrmZUQQDpJDjCuP1mGe+1RSy+vgn\\nJa4b0Wjd3HntWqiqnPwMpEtzvPjJ426MebpVO/GBZwxIL2Y4sb51khMjKU+vghce\\n5MZ4JH/1AgMBAAECggEACzxfe8zjYyZgsT36AI1RlaRzdezQ8B7QJGbZo+luJiyO\\nLLRWFXJdjXsnriloG8MS9ItNS6GuiB/MsttByR1GuQ7kWbi8bxL5ppZHmGep8vbt\\nyDrta0uyH6ojAYTrraAl4VlW/uENrNluk1piX840n+3dZA/opw+D/9V0CLGDzq7R\\ngSMzQIoNHFqFQNM23g14DfKapHJWJm45ybPjSenQpNn+od6+CKWRA92nPc4sfbMm\\neq5kCpS76iEjOAu4Tqbc1EBlCxQY53Ou8aBTy/AKQFI6glXQ3cPkIqzms9wHzy1h\\njo6Igq3butKEpk81xZg5373bO3qHCuePDB5nrWpIkQKBgQDrExjrhKV1MeS6XxEG\\nzwHhfcSKc8OzYLa8RjQbKPAaEHOlHTLTvy0dRtLWzr51FMB3CXDY9ube9adaZ7+f\\nYIXdZYG+efJAyhqxxE8xd7xEke4YdR/3Vp8OJ/imR503A2xZgAh8cohw2p90iCDV\\nl0xKGtPRSRUWtxZJpSf29Jh2SQKBgQDBoMtMeN+Xn/jH0a+ikD5vKBuXVG6OL1lc\\ngpffOThwNuwp0wXjZVjqXkK4Hx2UHffS0rA5rO8BAMAcMxfy0NuI27v2ecI46N7j\\n/bHGRnIJG3iDXs3Lx3loV2TQjJmsX/9tkbTUmrJdWErTAkxvYw7DYoR2nqkJcKw3\\nEprbVNGMTQKBgHZUBZ5ABf1pIQaDZhG0T/EOmslKnn8DttgsynvFbp7gGyZI/VXD\\nDNWI2gaQySQsTvlcgjZkijA/HX+Pa9CxCJE6UEXuInhkg21qMKbo65bkkiIziuS4\\n8JVyn2Ir+EJB8d9XaG4kRPPxyIQjJcv+PcOrn2Xg0MG/ZXOqs+RGmRwpAoGBAJTJ\\nsm75Exe4XbtubcBFhzRzZYBL6QhpagmkcH+fwLa5/Y/GEGhEoKa3+Bz0DA6dWKow\\nLCqlsKLcqMMCoAx+YbQw5abouU5x45TehZUO3OISsfCBETLd/XUocteuswe6XNUd\\neg9FMHp6NkUfJw0Q2W9abN+Z29rdMfi/2y9fZgahAoGAH36dxNOIJiMMqEdr+YI2\\nUD6KacA/0qhFUU63Nx6m7YZ58rkRFLTV1F6qNiZn7QVFgtP4TJlB+m4GruF5V6Y/\\nOshSHQ7hU7zmUOsO53aJVe04iLhXdbDTwd2aezBPL7cTHhL4AZ73iFvXlySIaXQl\\ni8kF+jnJIddr/H7c7SZ2apw=\\n-----END PRIVATE KEY-----\\n\",\r\n        \"client_email\": \"firebase-adminsdk-7l56g@firestore491test.iam.gserviceaccount.com\",\r\n        \"client_id\": \"112284953008835814355\",\r\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\r\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\r\n        \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\r\n        \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-7l56g%40firestore491test.iam.gserviceaccount.com\"\r\n        }   \r\napp.config[\"FIREBASE_ADMIN_CREDENTIAL\"] = credentials.Certificate(cert)\r\nfirebase = FirebaseAdmin(app)\r\ndb = firebase.firestore.client()\r\n\r\n# Flask_Login Stuff\r\nlogin_manager = LoginManager()\r\nlogin_manager.init_app(app)\r\nlogin_manager.login_view = 'login'\r\n@login_manager.user_loader\r\ndef load_user():\r\n\treturn db.collection('Admins').document('hMhBXy4cuNT7mG6VRR16').get()\r\n\r\n@app.route('/') # by default, web page starts with the login page\r\ndef index():\r\n    return render_template(\"admin_login.html\")\r\n\r\n# in login screen, email and password inputs are taken. After that below code checks if the given inputs are valid or not\r\n# by checking from the database\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    email = request.form['email']\r\n    password = request.form['password']\r\n\r\n    users_ref = db.collection('Admins')\r\n    query = users_ref.where('email', '==', email).get()\r\n\r\n    if len(query) == 1:\r\n        #In this code block, the variable user is being set to the first result in the query list returned by the where method\r\n        # applied to the users_ref collection, which is filtered by the email entered in the login form.\r\n        user = query[0]\r\n        #Since query is a collection of Firestore documents returned from the get() method,\r\n        # it is a list-like object, so query[0] retrieves the first (and in this case, only) document that matches the specified email.\r\n        if user.to_dict()['password'] == password:\r\n            session[\"email\"]=email\r\n            # user authentication succeeded\r\n            return redirect(url_for(\"home\"))\r\n        else:\r\n            # user authentication failed\r\n            pass\r\n    else:\r\n        # user authentication failed\r\n        pass\r\n    return render_template(\"admin_login.html\")\r\n\r\n@app.route('/logout') # after logout operation, web site redirects to the login screen\r\n#@login_required\r\ndef logout():\r\n    session.clear()\r\n    return redirect(\"/\")\r\n    \r\n@app.route('/home',methods=[\"GET\", \"POST\"])\r\ndef home():\r\n    #Get the current UTC datetime\r\n    now_utc = datetime.utcnow()\r\n    # Convert to the desired timezone (UTC+2 in this case)\r\n    now = now_utc + timedelta(hours=2)\r\n\r\n    num_of_cust_day=0\r\n    ticketsref = db.collection('Tickets') #our database's connection\r\n    docs = ticketsref.stream()\r\n    #for doc in docs.where('date_time','>=',now.day):#idk\r\n       #num_of_cust_day=+1\r\n\r\n\r\n    #num_of_cust_day=20\r\n    num_of_cust_reg=30#for a month\r\n    num_of_emp=10\r\n    weekly_list=[]\r\n    week_label=['1st week','2nd week','3rd week','4th week']\r\n\r\n    week1_ticket=0#ticket num for each week for graph in a month(line)\r\n\r\n    #x = np.array(calendar.monthcalendar(now.year, now.month))\r\n   # week_of_month = np.where(x==day)[0][0] + 1\r\n\r\n    #for doc in docs.where('date_time','>=',now.month):#fix\r\n        #if doc.where('date_time','>=',now.day-7):\r\n            #week1_ticket=+1\r\n    week2_ticket=173\r\n    week3_ticket=84\r\n    week4_ticket=66\r\n    weekly_list.append(week1_ticket)\r\n    weekly_list.append(week2_ticket)\r\n    weekly_list.append(week3_ticket)\r\n    weekly_list.append(week4_ticket)\r\n    branch_ticket_list=[]\r\n    branch_ticket_label=['Nicosia Branch','KalkanlÄ± Branch','Kyrenia Branch']\r\n    branch_1_ticket=20#ticket num for each branch for graph in a day(area)\r\n    branch_2_ticket=10\r\n    branch_3_ticket=35\r\n    branch_ticket_list.append(branch_1_ticket)\r\n    branch_ticket_list.append(branch_2_ticket)\r\n    branch_ticket_list.append(branch_3_ticket)\r\n    branch_queue_list=[]\r\n    branch_1_queue=34#customer in queue num for each branch for graph in a day(column)\r\n    branch_2_queue=25\r\n    branch_3_queue=38\r\n    branch_queue_list.append(branch_1_queue)\r\n    branch_queue_list.append(branch_2_queue)\r\n    branch_queue_list.append(branch_3_queue)\r\n\r\n    return render_template(\"home.html\",num_of_cust_day=num_of_cust_day,num_of_cust_reg=num_of_cust_reg,num_of_emp=num_of_emp,\r\n                           weekly_list=weekly_list,week_label=week_label,branch_ticket_list=branch_ticket_list,branch_ticket_label=branch_ticket_label,branch_queue_list=branch_queue_list)\r\n\r\n####### view parts \r\n@app.route('/branch',methods=[\"GET\", \"POST\"])\r\ndef branch():# this shows all the branches in the db\r\n    branchesref = db.collection('Branches') #our database's \"Branches\" collection's connection is shown here\r\n    docs = branchesref.stream()\r\n    headings=['name','Queue'] # needed parameters\r\n    data=[]\r\n    for doc in docs:\r\n        temp = []\r\n        try:\r\n            for header in headings:\r\n                if header == 'Queue':#we are keeping the queue as a directory in Branches collection, so we split it to get wanted data\r\n                    queue_directory=doc.to_dict()[header].split('/')\r\n                    temp.append(queue_directory[2])\r\n                else:    \r\n                    temp.append(doc.to_dict()[header])\r\n        except KeyError:\r\n                temp.append('')  # handle missing fields by adding empty string        \r\n        data.append(temp)\r\n\r\n    return render_template(\"view_branch.html\", data=data, headings=headings)\r\n\r\n@app.route('/branch_emp/<name>',methods=[\"GET\", \"POST\"])\r\ndef branch_employee(name):# this shows the employees according to which branch they are located in the db\r\n    employeesref = db.collection('Employees')\r\n    headings=['name','surname','reg_date','email','branch','uid'] # needed parameters\r\n    data=[]\r\n    query = employeesref.where(\"branch.name\",\"==\", name).stream() # since specific branch name is passed to here, we are filtering according to it\r\n    for doc in query:\r\n        temp = []\r\n        for header in headings:\r\n            try:\r\n                if header!='branch':\r\n                    temp.append(doc.to_dict()[header])\r\n                else:\r\n                    temp.append(doc.to_dict()[header]['name'])\r\n            except KeyError:\r\n                temp.append('')  # handle missing fields by adding empty string\r\n        data.append(temp)\r\n    return render_template(\"view_branch_emp.html\", data=data, headings=headings)\r\n\r\n@app.route('/emp',methods=[\"GET\", \"POST\"])\r\ndef employee():# this shows all the employees in the db\r\n    employeesref = db.collection('Employees')\r\n    headings=['name','surname','reg_date','email','branch','uid'] # needed parameters\r\n    data=[]\r\n    docs = employeesref.stream()\r\n    for doc in docs:\r\n        temp = []\r\n        for header in headings:\r\n            try:\r\n                if header!='branch':\r\n                    temp.append(doc.to_dict()[header])\r\n                else:\r\n                    temp.append(doc.to_dict()[header]['name'])\r\n            except KeyError:\r\n                temp.append('')  # handle missing fields by adding empty string\r\n        data.append(temp)\r\n    return render_template(\"view_emp.html\", data=data, headings=headings)\r\n\r\n@app.route('/cust',methods=[\"GET\", \"POST\"])\r\ndef customer():# this shows all the customers in the db\r\n    customersref = db.collection('Customers')\r\n    headings=['name','surname','priority','email','age','uid'] # needed parameters\r\n    data=[]\r\n    docs = customersref.stream()\r\n    for doc in docs:\r\n        temp = []\r\n        for header in headings:\r\n            try:\r\n                temp.append(doc.to_dict()[header])\r\n            except KeyError:\r\n                temp.append('')  # handle missing fields by adding empty string\r\n        data.append(temp)\r\n    return render_template(\"view_customer.html\", data=data, headings=headings)\r\n\r\n#this will show the queues details and the active customers in the queues\r\n@app.route('/queue/<Queue>',methods=[\"GET\", \"POST\"])\r\ndef queue(Queue):#it should show position !!\r\n    queueref = db.collection('Queue').document(Queue).collection('TicketsInQueue')\r\n    chosen_queue = queueref.stream()\r\n    headings=['name','surname','priority','processType','total_waited_time','customer_id'] # needed parameters\r\n    data=[]\r\n    for ticket in chosen_queue:\r\n        temp = []\r\n        for header in headings:\r\n            try:\r\n                temp.append(ticket.to_dict()[header])\r\n            except KeyError:\r\n                temp.append('')  # handle missing fields by adding empty string\r\n        data.append(temp)\r\n    return render_template(\"view_queue.html\", data=data, headings=headings, Queue=Queue)  \r\n\r\n########### manage/update parts\r\n\r\n#these classes make use of flaskform by allowing us to edit wanted fields\r\nclass CustomerForm(FlaskForm):\r\n    name = StringField(\"Name:\", validators=[DataRequired()])\r\n    surname = StringField(\"Surname:\", validators=[DataRequired()])\r\n    email = StringField(\"Email:\", validators=[DataRequired()])\r\n    priority = StringField(\"Priority:\", validators=[DataRequired()])\r\n    birth_date = StringField(\"Birth date:\", validators=[DataRequired()])\r\n    submit = SubmitField(\"Submit\")\r\n\r\nclass EmployeeForm(FlaskForm):\r\n    name = StringField(\"Name:\", validators=[DataRequired()])\r\n    surname = StringField(\"Surname:\", validators=[DataRequired()])\r\n    email = StringField(\"Email:\", validators=[DataRequired()])\r\n    birth_date =StringField(\"Birth Date:\", validators=[DataRequired()])\r\n    branch_name = StringField(\"Branch Name:\", validators=[DataRequired()])\r\n    submit = SubmitField(\"Submit\")   \r\n\r\nclass ActiveCustomerForm(FlaskForm):\r\n    name = StringField(\"Name:\", validators=[DataRequired()])\r\n    surname = StringField(\"Surname:\", validators=[DataRequired()])\r\n    priority = StringField(\"Priority:\", validators=[DataRequired()])\r\n    processType =StringField(\"Process Type:\")\r\n    total_waited_time = StringField(\"Waited Time:\")\r\n    submit = SubmitField(\"Submit\")  \r\n\r\n@app.route('/delete_customer/<uid>', methods=[\"GET\", \"POST\"])\r\ndef delete_customer(uid):\r\n    customersref = db.collection('Customers') # db connection with the \"Customers\" collection\r\n    query = customersref.where(\"uid\", \"==\", uid).stream() # filtering according to the passed uid input\r\n    for doc in query:\r\n        customersref.document(doc.id).delete()   # deleting the customer who has passed uid when found\r\n    auth.delete_user(uid)   #deleting from auth    \r\n    return redirect('/cust')\r\n\r\n@app.route('/delete_employee/<uid>', methods=[\"GET\", \"POST\"])\r\ndef delete_employee(uid):\r\n    employeesref = db.collection('Employees') # db connection with the \"Employees\" collection\r\n    query = employeesref.where(\"uid\", \"==\", uid).stream() # filtering according to the passed uid input\r\n    for doc in query:\r\n        employeesref.document(doc.id).delete()      # deleting the employee who has passed uid when found\r\n    auth.delete_user(uid)   #deleting from auth\r\n    return redirect('/emp')\r\n\r\n@app.route('/delete_queue_customer/<Queue>/<customer_id>', methods=[\"GET\", \"POST\"])\r\ndef delete_queue_customer(Queue,customer_id):\r\n    queueref = db.collection('Queue').document(Queue).collection('TicketsInQueue')\r\n    query = queueref.where(\"customer_id\", \"==\", customer_id).stream()\r\n    for doc in query:\r\n        queueref.document(doc.id).delete()      # deleting the employee who has passed uid when found\r\n   \r\n    return redirect('/queue/<Queue>')#it shows empty list fix\r\n\r\n@app.route('/customer_edit/<uid>', methods=[\"GET\",\"POST\"])\r\ndef customer_edit(uid):\r\n    # Query the Customers collection to get the customer with the specified uid\r\n    customersref = db.collection('Customers')\r\n    form = CustomerForm()\r\n    query = customersref.where(\"uid\", \"==\", uid).stream() # filtering according to the passed uid input\r\n    for doc in query:\r\n        customer = doc.to_dict()\r\n    if request.method == \"POST\":\r\n        # Update the customer fields with the form data\r\n        customer['name'] = request.form['name']\r\n        customer['surname'] = request.form['surname']\r\n        customer['priority'] = int(request.form['priority'])\r\n        customer['reg_date'] = request.form['birth_date']#we keep birth day as a reg_date in db, idk why\r\n        customer['email'] = request.form['email']\r\n\r\n        #updating age according to birth_date\r\n        today = date.today()\r\n        reg_date = datetime.strptime(customer['reg_date'], '%d/%m/%Y').date()\r\n        customer['age'] = today.year - reg_date.year - ((today.month, today.day) < (reg_date.month, reg_date.day))\r\n\r\n        try:\r\n            auth.update_user(uid,email=customer['email'])#updating email in firebase auth\r\n            customersref.document(doc.id).update(customer) # Update the customer document in the Customers collection\r\n            flash(\"User Updated Successfully!\")\r\n            return redirect(\"customer_edit.html\", uid=uid)\r\n        except:\r\n            flash(\"Error! Looks like there was a problem...try again!\")\r\n            return render_template(\"customer_edit.html\", form=form, customer=customer, uid=uid)\r\n    else:\r\n        return render_template(\"customer_edit.html\", form=form, customer=customer, uid=uid)\r\n\r\n@app.route('/employee_edit/<uid>', methods=[\"GET\",\"POST\"])\r\ndef employee_edit(uid):\r\n    # Query the Employees collection to get the employee with the specified uid\r\n    employeesref = db.collection('Employees')\r\n    form = EmployeeForm()\r\n    query = employeesref.where(\"uid\", \"==\", uid).stream()  # filtering according to the passed uid input\r\n    for doc in query:\r\n        employee = doc.to_dict()\r\n    if request.method == \"POST\":\r\n        # Update the employee fields with the form data\r\n        employee['name'] = request.form['name']\r\n        employee['surname'] = request.form['surname']\r\n        employee['reg_date'] = request.form['birth_date']\r\n        employee['email'] = request.form['email']\r\n        \r\n        #updating the branch\r\n        branchesref= db.collection('Branches')\r\n        branch_query = branchesref.where(\"name\", \"==\", request.form['branch_name']).stream()  \r\n        new_branch = {}\r\n        for result in branch_query:\r\n            new_branch = result.to_dict()\r\n        employee['branch']=new_branch\r\n    \r\n        try:\r\n            auth.update_user(uid,email=employee['email'])#updating email in auth\r\n            employeesref.document(doc.id).update(employee) # Update the employee document in the Employees collection\r\n            flash(\"User Updated Successfully!\")\r\n            return redirect(\"employee_edit.html\", uid=uid)\r\n        except:\r\n            flash(\"Error! Looks like there was a problem...try again!\")\r\n            return render_template(\"employee_edit.html\", form=form, employee=employee, uid=uid)\r\n    else:\r\n        return render_template(\"employee_edit.html\", form=form, employee=employee, uid=uid)\r\n    \r\n@app.route('/queue_cust_edit/<Queue>/<customer_id>', methods=[\"GET\",\"POST\"])\r\ndef queue_cust_edit(Queue,customer_id):\r\n    queueref = db.collection('Queue').document(Queue).collection('TicketsInQueue')\r\n    query = queueref.where(\"customer_id\", \"==\", customer_id).stream()\r\n    form = ActiveCustomerForm()\r\n    active_customer={}\r\n    for doc in query:\r\n        active_customer = doc.to_dict()\r\n\r\n    if request.method == \"POST\":\r\n        # Update the customer fields with the form data\r\n        active_customer['priority'] = int(request.form['priority'])\r\n        active_customer['processType'] = request.form['processType']\r\n        active_customer['total_waited_time'] = request.form['total_waited_time']\r\n\r\n        try:\r\n            queueref.document(doc.id).update(active_customer) # Update the customer document in the Queue collection\r\n            flash(\"User Updated Successfully!\")\r\n            return redirect(\"queue_cust_edit.html\", Queue=Queue, customer_id=customer_id)\r\n        except:\r\n            flash(\"Error! Looks like there was a problem...try again!\")\r\n            return render_template(\"queue_cust_edit.html\", form=form, active_customer=active_customer, Queue=Queue, customer_id=customer_id)\r\n    else:\r\n        return render_template(\"queue_cust_edit.html\", form=form, active_customer=active_customer, Queue=Queue, customer_id=customer_id)    \r\n\r\n@app.route(\"/add_customer\", methods = [\"POST\", \"GET\"])\r\ndef add_customer():\r\n    form=CustomerForm()\r\n    customer={}\r\n    if request.method == \"POST\":#Only listen to POST\r\n        # Update the customer fields with the form data\r\n        customer['name'] = request.form['name']\r\n        customer['email'] = request.form['email']\r\n        customer['surname'] = request.form['surname']\r\n        customer['reg_date'] = request.form['birth_date']\r\n        customer['priority'] = int(request.form['priority'])\r\n        customer['password'] = '123456'# password? fix\r\n\r\n    #calculating age according to birth_date\r\n        today = date.today()\r\n        reg_date = datetime.strptime(customer['reg_date'], '%d/%m/%Y').date()\r\n        customer['age'] = today.year - reg_date.year - ((today.month, today.day) < (reg_date.month, reg_date.day))\r\n        if customer['age']>65 and customer['priority']<2:\r\n                customer['priority']=2\r\n        try:\r\n            #Try creating the user account using the provided data\r\n            auth_cust= auth.create_user(email=customer['email'], password=customer['password'])\r\n            customer['uid']=auth_cust.uid\r\n            #Append data to the firebase realtime database\r\n            newcustomersref = db.collection('Customers')\r\n            newcustomersref.document().set(customer)\r\n            #Go to customer list page\r\n            return redirect(url_for('customer'))\r\n        except:\r\n            #If there is any error, redirect to customer list page\r\n            return redirect(url_for('customer'))\r\n\r\n    else:\r\n        return render_template(\"add_customer.html\",form=form)\r\n\r\n@app.route(\"/add_employee/<name>\", methods = [\"POST\", \"GET\"])\r\ndef add_employee(name):\r\n    form=EmployeeForm()\r\n    employee={}\r\n    if request.method == \"POST\":#Only listen to POST\r\n        # Update the employee fields with the form data\r\n        employee['name'] = request.form['name']\r\n        employee['email'] = request.form['email']\r\n        employee['surname'] = request.form['surname']\r\n        employee['reg_date'] = request.form['birth_date']\r\n        employee['password'] = '123456'# password? fix\r\n\r\n        branchesref= db.collection('Branches')\r\n        branch_query = branchesref.where(\"name\", \"==\", name).stream()  \r\n        new_branch = {}\r\n        for result in branch_query:\r\n            new_branch = result.to_dict()\r\n        employee['branch']=new_branch\r\n\r\n        try:\r\n            #Try creating the user account using the provided data\r\n            auth_emp= auth.create_user(email=employee['email'], password=employee['password'])\r\n            employee['uid']=auth_emp.uid\r\n            #Append data to the firebase realtime database\r\n            newemployeesref = db.collection('Employees')\r\n            newemployeesref.document().set(employee)\r\n            #Go to employee list page\r\n            return redirect(url_for('branch_employee'))\r\n        except:\r\n            #If there is any error, redirect to branch list page\r\n            return redirect(url_for('branch'))\r\n\r\n    else:\r\n        return render_template(\"add_employee.html\",name=name,form=form)\r\n\r\n@app.route(\"/simulation\", methods = [\"POST\", \"GET\"])\r\ndef simulation():\r\n    return render_template(\"simulation.html\")\r\n\r\n@app.route(\"/settings\", methods = [\"POST\", \"GET\"])\r\ndef settings():\r\n    return render_template(\"settings.html\")\r\n\r\n\r\n\r\n# the route for running the simulation\r\n@app.route('/run_simulation', methods=['POST'])\r\ndef run_simulation_route():\r\n\r\n    output = subprocess.check_output(['python', 'bank_simulation.py'], universal_newlines=True)\r\n    return render_template('main.html', output=output)\r\n    \r\ndef delete_all_customers():\r\n    customersref = db.collection('Customers')\r\n    all_customers = customersref.stream()\r\n    for doc in all_customers:\r\n        delete_customer(doc.uid)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)\r\n
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	
+++ b/test.py	
@@ -12,6 +12,7 @@
 import random
 import subprocess
 import calendar
+import bank_simulation as sim
 
 
 app = Flask(__name__)
@@ -449,15 +450,21 @@
 def settings():
     return render_template("settings.html")
 
+@app.route('/table_view', methods=['POST','GET'])
+def table_view():
+    subprocess.run(['python', 'bank_simulation.py'])
+    with open('simulation_results.txt', 'r') as file:
+        output = file.readlines()
+    return render_template("table_option.html",output=output[0], output2=output[1])
 
+@app.route('/graph_view', methods=['POST','GET'])
+def graph_view():
+    subprocess.run(['python', 'bank_simulation.py'])
+    with open('simulation_results.txt', 'r') as file:
+        output = file.readlines()
+    return render_template("graph_option.html", output=output[0], output2=output[1])
 
-# the route for running the simulation
-@app.route('/run_simulation', methods=['POST'])
-def run_simulation_route():
 
-    output = subprocess.check_output(['python', 'bank_simulation.py'], universal_newlines=True)
-    return render_template('main.html', output=output)
-    
 def delete_all_customers():
     customersref = db.collection('Customers')
     all_customers = customersref.stream()
