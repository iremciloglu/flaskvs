Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import *\r\nfrom firebase_admin import credentials, firestore\r\nfrom flask_firebase_admin import FirebaseAdmin\r\nfrom flask_wtf import FlaskForm\r\nfrom wtforms import StringField, SubmitField\r\nfrom wtforms.validators import DataRequired\r\nimport os\r\n\r\n\r\napp = Flask(__name__)\r\nSECRET_KEY = os.urandom(32)\r\napp.config['SECRET_KEY'] = SECRET_KEY\r\ncert = {\r\n        \"type\": \"service_account\",\r\n        \"project_id\": \"firestore491test\",\r\n        \"private_key_id\": \"5e88bfeaa543c68726e84cd605cafc1b739a238e\",\r\n        \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCxzQxnf6ARarYE\\nTnTMUB5ZE0Lf19/qOe9ygj5LC7enZzgMw9+YrQP6O7i/sEcIsjC/RDN8hYblSUTO\\n0yHdorat226HgA5UNw8GRQ6JnM+7UVyTSIQrtYp0Ci3ITTeStAgg1iSLk9xjtijI\\nlPQNBELESaO1SUMYtG/XikyYhwgEX0WIkq4ZemWEHLgk2fxvUAWxsREQjCtrTqJw\\nMr4CqcO2tWs5nf2aYHz+SpHkxIjF5/0TyLlxCrmZUQQDpJDjCuP1mGe+1RSy+vgn\\nJa4b0Wjd3HntWqiqnPwMpEtzvPjJ426MebpVO/GBZwxIL2Y4sb51khMjKU+vghce\\n5MZ4JH/1AgMBAAECggEACzxfe8zjYyZgsT36AI1RlaRzdezQ8B7QJGbZo+luJiyO\\nLLRWFXJdjXsnriloG8MS9ItNS6GuiB/MsttByR1GuQ7kWbi8bxL5ppZHmGep8vbt\\nyDrta0uyH6ojAYTrraAl4VlW/uENrNluk1piX840n+3dZA/opw+D/9V0CLGDzq7R\\ngSMzQIoNHFqFQNM23g14DfKapHJWJm45ybPjSenQpNn+od6+CKWRA92nPc4sfbMm\\neq5kCpS76iEjOAu4Tqbc1EBlCxQY53Ou8aBTy/AKQFI6glXQ3cPkIqzms9wHzy1h\\njo6Igq3butKEpk81xZg5373bO3qHCuePDB5nrWpIkQKBgQDrExjrhKV1MeS6XxEG\\nzwHhfcSKc8OzYLa8RjQbKPAaEHOlHTLTvy0dRtLWzr51FMB3CXDY9ube9adaZ7+f\\nYIXdZYG+efJAyhqxxE8xd7xEke4YdR/3Vp8OJ/imR503A2xZgAh8cohw2p90iCDV\\nl0xKGtPRSRUWtxZJpSf29Jh2SQKBgQDBoMtMeN+Xn/jH0a+ikD5vKBuXVG6OL1lc\\ngpffOThwNuwp0wXjZVjqXkK4Hx2UHffS0rA5rO8BAMAcMxfy0NuI27v2ecI46N7j\\n/bHGRnIJG3iDXs3Lx3loV2TQjJmsX/9tkbTUmrJdWErTAkxvYw7DYoR2nqkJcKw3\\nEprbVNGMTQKBgHZUBZ5ABf1pIQaDZhG0T/EOmslKnn8DttgsynvFbp7gGyZI/VXD\\nDNWI2gaQySQsTvlcgjZkijA/HX+Pa9CxCJE6UEXuInhkg21qMKbo65bkkiIziuS4\\n8JVyn2Ir+EJB8d9XaG4kRPPxyIQjJcv+PcOrn2Xg0MG/ZXOqs+RGmRwpAoGBAJTJ\\nsm75Exe4XbtubcBFhzRzZYBL6QhpagmkcH+fwLa5/Y/GEGhEoKa3+Bz0DA6dWKow\\nLCqlsKLcqMMCoAx+YbQw5abouU5x45TehZUO3OISsfCBETLd/XUocteuswe6XNUd\\neg9FMHp6NkUfJw0Q2W9abN+Z29rdMfi/2y9fZgahAoGAH36dxNOIJiMMqEdr+YI2\\nUD6KacA/0qhFUU63Nx6m7YZ58rkRFLTV1F6qNiZn7QVFgtP4TJlB+m4GruF5V6Y/\\nOshSHQ7hU7zmUOsO53aJVe04iLhXdbDTwd2aezBPL7cTHhL4AZ73iFvXlySIaXQl\\ni8kF+jnJIddr/H7c7SZ2apw=\\n-----END PRIVATE KEY-----\\n\",\r\n        \"client_email\": \"firebase-adminsdk-7l56g@firestore491test.iam.gserviceaccount.com\",\r\n        \"client_id\": \"112284953008835814355\",\r\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\r\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\r\n        \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\r\n        \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-7l56g%40firestore491test.iam.gserviceaccount.com\"\r\n        }   \r\napp.config[\"FIREBASE_ADMIN_CREDENTIAL\"] = credentials.Certificate(cert)\r\nfirebase = FirebaseAdmin(app)\r\ndb = firebase.firestore.client()\r\n  \r\n\r\n\r\n@app.route('/')\r\ndef login():\r\n    return render_template(\"admin_login.html\")\r\n    \r\n@app.route('/home',methods=[\"GET\", \"POST\"])\r\ndef home():\r\n    return render_template(\"home.html\")\r\n\r\n########### view list parts\r\n@app.route('/branch',methods=[\"GET\", \"POST\"])\r\ndef branch():# this shows all the branches in the db\r\n    branchesref = db.collection('Branches')\r\n    docs = branchesref.stream()\r\n    headings=['name','location']\r\n    data=[]\r\n    for doc in docs:\r\n        temp = []\r\n        for header in headings:\r\n            temp.append(doc.to_dict()[header])\r\n        data.append(temp)\r\n\r\n    return render_template(\"view_branch.html\", data=data, headings=headings)\r\n\r\n@app.route('/branch_emp/<name>',methods=[\"GET\", \"POST\"])\r\ndef branch_employee(name):# this shows the employees according to which branch they are located in the db\r\n    employeesref = db.collection('Employees')\r\n    headings=['name','surname','reg_date','email']\r\n    data=[]\r\n    query = employeesref.where(\"branch.name\",\"==\", name).stream()\r\n    for doc in query:\r\n        temp = []\r\n        for header in headings:\r\n            temp.append(doc.to_dict()[header])\r\n        data.append(temp)\r\n    return render_template(\"view_branch_emp.html\", data=data, headings=headings)\r\n\r\n@app.route('/emp',methods=[\"GET\", \"POST\"])\r\ndef employee():# this shows all the employees in the db\r\n    employeesref = db.collection('Employees')\r\n    headings=['name','surname','reg_date','email']\r\n    data=[]\r\n    docs = employeesref.stream()\r\n    for doc in docs:\r\n        temp = []\r\n        for header in headings:\r\n            try:\r\n                temp.append(doc.to_dict()[header])\r\n            except KeyError:\r\n                temp.append('')  # handle missing fields by adding empty string\r\n        data.append(temp)\r\n    return render_template(\"view_emp.html\", data=data, headings=headings)\r\n\r\n\r\n@app.route('/cust',methods=[\"GET\", \"POST\"])\r\ndef customer():# this shows all the customers in the db\r\n    customersref = db.collection('Customers')\r\n    headings=['name','surname','priority','email','age','uid']\r\n    data=[]\r\n    docs = customersref.stream()\r\n    for doc in docs:\r\n        temp = []\r\n        for header in headings:\r\n            try:\r\n                temp.append(doc.to_dict()[header])\r\n            except KeyError:\r\n                temp.append('')  # handle missing fields by adding empty string\r\n        data.append(temp)\r\n    return render_template(\"view_customer.html\", data=data, headings=headings)\r\n\r\n#not ready\r\n#this will show te queues details and the active customers in the queues\r\n@app.route('/queue',methods=[\"GET\", \"POST\"])\r\ndef queue():\r\n    queuesref = db.collection('Queue')\r\n    docs =queuesref.stream()\r\n    queue_list=[]\r\n    for doc in docs:\r\n        queue_list.append('{} : {}'.format(doc.id,doc.to_dict()))\r\n    return queue_list   \r\n\r\n    ########### manage/update parts\r\n\r\n\r\nclass CustomerForm(FlaskForm):\r\n    name = StringField(\"Name:\", validators=[DataRequired()])\r\n    surname = StringField(\"Surname:\", validators=[DataRequired()])\r\n    email = StringField(\"Email:\", validators=[DataRequired()])\r\n    priority = StringField(\"Priority:\")\r\n    age = StringField(\"Age:\")\r\n    submit = SubmitField(\"Submit\")\r\n\r\n@app.route('/delete', methods=[\"GET\", \"POST\"])\r\ndef delete():\r\n    return 1\r\n\r\n@app.route('/customer_edit/<uid>', methods=[\"GET\",\"POST\"])\r\ndef customer_edit(uid):\r\n    # Query the Customers collection to get the customer with the specified uid\r\n    customersref = db.collection('Customers')\r\n    form = CustomerForm()\r\n    query = customersref.where(\"uid\", \"==\", uid).stream()\r\n    for doc in query:\r\n        customer = doc.to_dict()\r\n    if request.method == \"POST\":\r\n        # Update the customer fields with the form data\r\n        customer['name'] = request.form['name']\r\n        customer['email'] = request.form['email']\r\n        customer['surname'] = request.form['surname']\r\n        customer['priority'] = request.form['priority']\r\n        customer['age'] = request.form['age']\r\n        try:\r\n            # Update the customer document in the Customers collection\r\n            customersref.document(doc.id).update(customer)\r\n            ###eylül şimdi bu kısımda update(customer) yerine set(customer) veya update({'priority'}:customer['priority']) gibi \r\n            # yada update({'priority'}:customer.priority) gibi tek tek update yapılabiliyor hepsini denedim ama olmadı\r\n            flash(\"User Updated Successfully!\")\r\n            return redirect(\"customer_edit.html\", uid=uid)\r\n        except:\r\n            flash(\"Error! Looks like there was a problem...try again!\")\r\n            return render_template(\"customer_edit.html\", form=form, customer=customer, uid=uid)\r\n    else:\r\n        #return redirect(url_for('home'))\r\n        return render_template(\"customer_edit.html\", form=form, customer=customer, uid=uid)#delete ekle\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	
+++ b/test.py	
@@ -6,7 +6,6 @@
 from wtforms.validators import DataRequired
 import os
 
-
 app = Flask(__name__)
 SECRET_KEY = os.urandom(32)
 app.config['SECRET_KEY'] = SECRET_KEY
@@ -27,7 +26,6 @@
 db = firebase.firestore.client()
   
 
-
 @app.route('/')
 def login():
     return render_template("admin_login.html")
@@ -36,7 +34,6 @@
 def home():
     return render_template("home.html")
 
-########### view list parts
 @app.route('/branch',methods=["GET", "POST"])
 def branch():# this shows all the branches in the db
     branchesref = db.collection('Branches')
@@ -108,9 +105,8 @@
         queue_list.append('{} : {}'.format(doc.id,doc.to_dict()))
     return queue_list   
 
-    ########### manage/update parts
+########### manage/update parts
 
-
 class CustomerForm(FlaskForm):
     name = StringField("Name:", validators=[DataRequired()])
     surname = StringField("Surname:", validators=[DataRequired()])
@@ -141,10 +137,8 @@
         try:
             # Update the customer document in the Customers collection
             customersref.document(doc.id).update(customer)
-            ###eylül şimdi bu kısımda update(customer) yerine set(customer) veya update({'priority'}:customer['priority']) gibi 
-            # yada update({'priority'}:customer.priority) gibi tek tek update yapılabiliyor hepsini denedim ama olmadı
             flash("User Updated Successfully!")
-            return redirect("customer_edit.html", uid=uid)
+            return redirect("view_customer", uid=uid)
         except:
             flash("Error! Looks like there was a problem...try again!")
             return render_template("customer_edit.html", form=form, customer=customer, uid=uid)
